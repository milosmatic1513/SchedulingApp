package com.example.scheduleme;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.facetec.sdk.FaceTecIDScanResult;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.AuthenticateProcessor;
import Processors.Config;
import Processors.EnrollmentProcessor;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.PhotoIDMatchProcessor;
import Processors.Processor;
import okhttp3.Call;
import okhttp3.Callback;

public class FacetecAuthentication extends AppCompatActivity {

    public FaceTecSessionResult latestSessionResult;
    public FaceTecIDScanResult latestIDScanResult;
    public Processor latestProcessor;
    public boolean isAuthenticated=false;
    String latestExternalDatabaseRefID = "";
    JSONObject latestServerResult;
    TextView messageDisplay;
    private FirebaseAuth mAuth;
    String CurrentUID="";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_facetec_authentication);
        //ComponentInitialization
        messageDisplay=findViewById(R.id.messageDisplay);

        //Firebase Initialization
        mAuth = FirebaseAuth.getInstance();



    }

    public void initializeFacetec() {
        messageDisplay.setText("Initializing Face Scanner ... ");
        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {

            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {

                    Log.d("Facetec","Success");
                    int mode = getIntent().getIntExtra("mode",0);

                    if (mode == 1) {
                        //Authenticate
                        if (latestExternalDatabaseRefID.length() == 0) {
                            Log.d("FaceTecSDKSampleApp", "Enroll First.");
                            return;
                        }
                        getSessionToken(new SessionTokenCallback() {
                            @Override
                            public void onSessionTokenReceived(String sessionToken) {
                                latestProcessor = new AuthenticateProcessor(sessionToken, FacetecAuthentication.this);
                            }
                        });
                    }
                    else if (mode==2)
                    {
                        //enroll
                        getSessionToken(new SessionTokenCallback() {
                            @Override
                            public void onSessionTokenReceived(String sessionToken) {

                                latestProcessor = new EnrollmentProcessor(sessionToken, FacetecAuthentication.this);
                            }
                        });
                    }
                    else if (mode==3)
                    {
                        //enroll
                        getSessionToken(new SessionTokenCallback() {
                            @Override
                            public void onSessionTokenReceived(String sessionToken) {

                                latestProcessor = new PhotoIDMatchProcessor(sessionToken, FacetecAuthentication.this);
                            }
                        });
                    }
                }

            }
        });

        FaceTecSDK.setCustomization(Config.currentCustomization);
    }

    public void setLatestIDScanResult(FaceTecIDScanResult idScanResult) {
        this.latestIDScanResult = idScanResult;
    }

    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
    }

    public String getLatestExternalDatabaseRefID() {
        return latestExternalDatabaseRefID;
    }

    public void setLatestServerResult(JSONObject responseJSON) {
        this.latestServerResult = responseJSON;
    }

    // Perform Enrollment, generating a username each time to guarantee uniqueness.
    public void onEnrollUserPressed(View v) {
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                latestExternalDatabaseRefID = "android_sample_app_1";
                latestProcessor = new EnrollmentProcessor(sessionToken, FacetecAuthentication.this);
            }
        });

    }

    public void onLivenessCheckPressed(View v) {
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                latestProcessor = new LivenessCheckProcessor( sessionToken,FacetecAuthentication.this);
            }
        });


    }

    // Perform Authentication, using the username from Enrollment.
    public void onAuthenticateUserPressed(View v) {
        if(latestExternalDatabaseRefID.length() == 0){
            Log.d("FaceTecSDKSampleApp", "Enroll First.");
            return;
        }


        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                latestProcessor = new AuthenticateProcessor( sessionToken, FacetecAuthentication.this);
            }
        });

    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                }
            }
        });


    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
        FirebaseUser currentUser = mAuth.getCurrentUser();
        if(currentUser!=null)
        {
            String UID =currentUser.getUid();
            latestExternalDatabaseRefID = "schedule_me_"+UID;
            Log.d("UID",latestExternalDatabaseRefID );
            initializeFacetec();
        }
        else
        {
            messageDisplay.setText("You have been logged out");
        }
    }


    public void goToMain()
    {
        Intent intent = new Intent(getApplicationContext(), MainPage.class);
        intent.putExtra("Authenticated",isAuthenticated);
        startActivity(intent);
    }
    @Override
    protected void onResume() {
        super.onResume();
        if(isAuthenticated==true) {
            messageDisplay.setText("Redirecting...");
            goToMain();

        }
    }


}